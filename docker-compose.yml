version: '3'

services:

  # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  # RUN
  #
  # Start the API without any dependant services.
  #
  #  This is great for using the dependant services
  #  in the production environment, but running
  #  the API Service code locally.
  #
  #  Set environment in the host operating system:
  #   ENV_DB_HOST, ENV_ES_HOST, ENV_STORAGE_HOST
  #  to loggjafarthing.einarvalur.co
  #  and ENV_SEARCH to elasticsearch
  #
  ## = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  run:
    container_name: server_run
    build:
      args:
        - ENV=development
      context: .
      dockerfile: Dockerfile
    ports:
      - 8080:80
    volumes:
      - ./config/:/var/www/config
      - ./module/:/var/www/module
      - ./public/:/var/www/public
      - ./composer.json:/var/www/composer.json
      - ./composer.lock:/var/www/composer.lock
      - ./vendor/:/var/www/vendor
    environment:
      - PHP_IDE_CONFIG=PHPSTORM
      - XDEBUG_CONFIG=remote_host=host.docker.internal remote_port=9001

      - LOG_PATH=php://stdout

      - APPLICATION_ENVIRONMENT=development

      # - DB_HOST=${ENV_DB_HOST:-host.docker.internal}
      - DB_HOST=database
      # - DB_PORT=${ENV_DB_PORT:-4406}
      - DB_PORT=3306
      - DB_NAME=${ENV_DB_NAME:-althingi}
      - DB_USER=${ENV_DB_USER:-root}
      - DB_PASSWORD=${ENV_DB_PASSWORD:-example}

      - CACHE_TYPE=none

      - SEARCH=${ENV_SEARCH:-none}

      - ES_HOST=${ENV_ES_HOST:-host.docker.internal}
      - ES_PROTO=${ENV_ES_PROTO:-http}
      - ES_PORT=${ENV_ES_PORT:-9200}
      - ES_USER=${ENV_ES_USER:-elastic}
      - ES_PASSWORD=${ENV_ES_PASSWORD:-changeme}

      - QUEUE=none

    #   - STORAGE_HOST=${ENV_STORAGE_HOST:-host.docker.internal}
      - STORAGE_HOST=store
      - STORAGE_DB=${ENV_STORAGE_DB:-althingi}
      - STORAGE_PORT=${ENV_STORAGE_PORT:-27017}
      - STORAGE_USER=${ENV_STORAGE_USER:-wo}
      - STORAGE_PASSWORD=${ENV_STORAGE_PASSWORD:-long@pass!123}

      - DOCUMENT_SERVER=${ENV_DOCUMENT_SERVER:-localhost:8080}
      - DOCUMENT_DEFINITION=${ENV_DOCUMENT_DEFINITION:-/openapi}

      - INDEXER_STALL_TIME=${ENV_INDEXER_STALL_TIME:-150000}
    depends_on:
      - database
      - store

  test:
    container_name: server_test
    build:
      args:
        - ENV=development
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./config/:/var/www/config
      - ./module/:/var/www/module
      - ./public/:/var/www/public
      - ./phpcs.xml:/var/www/phpcs.xml
      - ./phpunit.xml.dist:/var/www/phpunit.xml
      - ./auto/wait-for.sh:/var/www/wait-for.sh
    environment:
      - APPLICATION_ENVIRONMENT=development

      - PHP_IDE_CONFIG=PHPSTORM
      - XDEBUG_CONFIG=remote_host=host.docker.internal remote_port=9001

      - LOG_PATH=none

      - DB_HOST=database_test
      - DB_PORT=3306
      - DB_NAME=althingi
      - DB_USER=root
      - DB_PASSWORD=example

      - CACHE_TYPE=none

      - SEARCH=none

      - ES_HOST=${ENV_ES_HOST:-host.docker.internal}
      - ES_PROTO=${ENV_ES_PROTO:-http}
      - ES_PORT=${ENV_ES_PORT:-9200}
      - ES_USER=${ENV_ES_USER:-elastic}
      - ES_PASSWORD=${ENV_ES_PASSWORD:-changeme}

      - QUEUE=none

      - STORAGE_HOST=store-test
      - STORAGE_DB=althingi
      - STORAGE_PORT=27017
      - STORAGE_USER=wo
      - STORAGE_PASSWORD=long@pass!123

      - DOCUMENT_SERVER=${ENV_DOCUMENT_SERVER:-localhost:8080}
      - DOCUMENT_DEFINITION=${ENV_DOCUMENT_DEFINITION:-/openapi}

      - INDEXER_STALL_TIME=${ENV_INDEXER_STALL_TIME:-150000}
    depends_on:
      - database_test
      - store-test
    command: bash -c "./wait-for.sh database:3306 -t 80 -- echo \"MySQL up\" &&  ./vendor/bin/phpunit && ./vendor/bin/phpcs --standard=./phpcs.xml ./module/Althingi/src"

  # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  # MySQL
  #
  # Database container that will create an instance of the database
  # that uses the schema from ./auto/schema.sql. It will not persist
  # the database, once it goes down, so does the data.
  # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  database:
    container_name: althingi_test_database
    image: mysql:5.6.41
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - ./auto/db/:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=example

  database_test:
    container_name: althingi_test_database_test
    image: mysql:5.6.41
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - ./auto/db/:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=example

  # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  # MongoDB
  #
  # Un-configured instance of MongoDB (no indexes) that does not
  # persist its data, once the service goes down, so does the data.
  # = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  store:
    container_name: althingi_test_store
    image: mongo:4.2.0-bionic

  store-test:
    container_name: althingi_test_store_test
    image: mongo:4.2.0-bionic
